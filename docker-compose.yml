services:
  postgres:
    image: postgres:16
    container_name: my-postgres
    environment:
      POSTGRES_USER: dongha
      POSTGRES_PASSWORD: dongha
      POSTGRES_DB: api-tuning
    ports:
      - "5432:5432"
    volumes:
      - ./pgdata:/var/lib/postgresql/data
      - ./scripts:/docker-entrypoint-initdb.d:ro
    command:
      - "postgres"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.track=all"

  redis:
    image: redis:7.2-alpine
    command: [ "redis-server", "--appendonly", "yes" ]
    ports: [ "6379:6379" ]
    volumes:
      - redisdata:/data

  prometheus:
    image: prom/prometheus:v2.54.1
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      # (옵션) 녹화 룰 파일 추가 시
      - ./prometheus/rules.yml:/etc/prometheus/rules.yml:ro
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --web.enable-lifecycle
      - --storage.tsdb.retention.time=15d
    ports: [ "9090:9090" ]
    depends_on: [ postgres-exporter ]

  grafana:
    image: grafana/grafana:11.2.0
    ports: [ "3000:3000" ]
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning  # (선택) 자동 프로비저닝

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    environment:
      DATA_SOURCE_URI: "postgres:5432/api-tuning?sslmode=disable"
      DATA_SOURCE_USER: "dongha"
      DATA_SOURCE_PASS: "dongha"
      # (선택) 커스텀 쿼리 파일로 pg_stat_statements 지표 확장
      PG_EXPORTER_EXTEND_QUERY_PATH: /config/queries.yaml
    volumes:
      - ./postgres-exporter/queries.yaml:/config/queries.yaml:ro
    depends_on:
      - postgres
    ports: [ "9187:9187" ]
    command:
      - --collector.stat_statements

  # (선택) redis-exporter
  redis-exporter:
    image: oliver006/redis_exporter:v1.62.0
    command: [ "--redis.addr=redis:6379" ]
    depends_on:
      - redis
    ports: [ "9121:9121" ]

  # (선택) 컨테이너 리소스 관측
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    privileged: true
    ports: [ "8082:8080" ]
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro

volumes:
  pgdata:
  redisdata: